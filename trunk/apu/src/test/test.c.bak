#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdarg.h>
#include <CL/opencl.h>

#define NWITEMS 64

const char *source = "__kernel void memset(__global uint *dst) { if(get_global_id(0)%2) dst[get_global_id(0)] = 0; else dst[get_global_id(0)] = 1; }\n";

int main(int argc, char *argv[])
{
	cl_platform_id platform;
	cl_uint platform_num;
	clGetPlatformIDs(1, &platform, &platform_num);
	cl_device_id device;
	clGetDeviceIDs(platform, CL_DEVICE_TYPE_GPU, 1, &device, NULL);
	cl_context context = clCreateContext(NULL, 1, &device, NULL, NULL, NULL);
	cl_command_queue queue = clCreateCommandQueue(context, device, 0, NULL);
	cl_program program = clCreateProgramWithSource(context, 1, &source, NULL, NULL);
	clBuildProgram(program, 1, &device, NULL, NULL, NULL);
	cl_kernel kernel = clCreateKernel(program, "memset", NULL);
	cl_mem buffer = clCreateBuffer(context, CL_MEM_WRITE_ONLY, NWITEMS*sizeof(cl_uint), NULL, NULL);

	size_t global_work_size = NWITEMS;
	clSetKernelArg(kernel, 0, sizeof(buffer), (void*)(&buffer));
	clEnqueueNDRangeKernel(queue, kernel, 1, NULL, &global_work_size, NULL, 0, NULL, NULL);
	clFinish(queue);

	cl_uint *ptr = (cl_uint*)clEnqueueMapBuffer(queue, buffer, CL_TRUE, CL_MAP_READ, 0, NWITEMS*sizeof(cl_uint), 0, NULL, NULL, NULL);
	int i;
	for(i=0; i<NWITEMS; i++)
		printf("%d %d\n", i, ptr[i]);
	return 0;
}
